package com.example.pacio_000.picswapper2;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragSource;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import javafx.event.Event;
import javafx.scene.text.Font;

import javax.imageio.ImageIO;
import javax.swing.DropMode;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.TransferHandler;
import javax.swing.event.ChangeListener;

import 	java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author pacio_000
 */
public class PanelGlowny extends javax.swing.JFrame {

    /**
     * Creates new form PanelGlowny
     * @throws IOException 
     * @throws InterruptedException 
     */
    public PanelGlowny() throws IOException, InterruptedException {
        initComponents();
        this.setLocationRelativeTo(null);
        
    }
    public PanelGlowny(int  id) throws IOException, InterruptedException{
    	this.id=id;
    	initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * @throws IOException 
     * @throws InterruptedException 
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() throws IOException, InterruptedException {
    	 Przycisk = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        dodaj = new javax.swing.JButton();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        przycisk2 = new javax.swing.JButton();
        setResizable(false);
        getContentPane().setBackground(new Color(95,89,89));
        jLabel2.setForeground(new Color(255,255,255));
        jLabel3.setForeground(new Color(255,255,255));
        jPanel1.setBackground(new Color(149,144,144));
        jTextArea1.setBackground(new Color(149,144,144));
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        BufferedImage ic=ImageIO.read(new File("C:/PicSwaper/Temp/cloud-icon.png"));
        ImageIcon imicon=new ImageIcon(ic);
        Image imo=imicon.getImage();
        setIconImage(imo);
        //Toolkit.getDefaultToolkit().getImage(class.getResource("C:/Users/pacio_000/Desktop/cloud-icon.png"));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Foldery"));
       // Font font=new Font("Verdana", 15);
        jTextArea1.setFont(new java.awt.Font("Verdana", 0, 10)); 
        jTextArea1.setLineWrap(true);
      /*  Runnable r2=new WaekKonsola(jTextArea1);
	       Thread t2=new Thread(r2);
	       
	       t2.start();*/
        jTextField1.setText("55");
        Runnable r3=new Serwer(jTextArea1,Integer.parseInt(jTextField1.getText()));
        jButton3.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent event){
        		System.out.println("Startowanie serwra");
        		System.out.println("Port: "+jTextField1.getText() );
        		Serwer s=(Serwer)r3;
        		s.setPort(Integer.parseInt(jTextField1.getText()));
        		// Runnable r3=new Serwer(jTextArea1,Integer.parseInt(jTextField1.getText()));
        	     Thread t3=new Thread(r3);
        	     t3.start();
        	}
        });
        przycisk2.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent event){
        		Serwer lol=(Serwer)r3;
        		lol.setDzialanie(false);
        	}
        });
	    
        jLabel1.setText("jLabel1");

        jButton1.setText("\\/");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        String tekst="tekst";
       
        
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );
      
       
        
       jComboBox1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jComboBox1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "C:/PicSwaper"  }));
        mtmp=jComboBox1.getSelectedItem().toString();
        jLabel2.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel2.setText("Lokalizajca:");

        Przycisk.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        Przycisk.setText("Powrot");
        MouseListener lol;
        
        jPanel1.setDropTarget(new DropTarget(){
        	public synchronized void drop(DropTargetDropEvent dtde){
        		Transferable transfer=dtde.getTransferable();
        		if(transfer.isDataFlavorSupported(DataFlavor.javaFileListFlavor)){
        			dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
        			try {
						List objects=(List) transfer.getTransferData(DataFlavor.javaFileListFlavor);
						for(Object o : objects){
							File source=(File)o;
							File dst=new File(jComboBox1.getSelectedItem().toString()+File.separator+source.getName());
							if(!dst.exists()){
								dst.createNewFile();
							}
							Files.copy(source.toPath(), dst.toPath(), StandardCopyOption.REPLACE_EXISTING);
						}
					} catch (UnsupportedFlavorException | IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
        		}
        		
        	}
        });
        
     //   lol.
        jLabel2.addMouseListener(new MouseAdapter(){
        	public void mouseEntered(MouseEvent event){
        		jLabel2.setForeground(new Color(255,255,255));
        	}
        	public void mouseExited(MouseEvent event){
        		 jLabel2.setForeground(new Color(255,154,0));
        	}
        	public void mouseClicked(MouseEvent event){
        		//ItemEvent evento=new ItemEvent();
        		robiePanle(jComboBox1);
        	}
        });
        Przycisk.addActionListener(new ActionListener(){
			 public void actionPerformed(ActionEvent event){
				powrot();
			 }
		 });
        JPopupMenu menu=new JPopupMenu();
        JMenuItem item4=new JMenuItem("Nowy folder");
        JMenuItem item=new JMenuItem("Wklej");
        JMenuItem item2=new JMenuItem("Kopiuj");
        JMenuItem item3=new JMenuItem("Usun");
        item2.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent event){
        		Clipboard clip=Toolkit.getDefaultToolkit().getSystemClipboard();
        		String sciezkaa=jComboBox1.getSelectedItem().toString()+File.separator+mSciezka;
        		System.out.println("Sciezka w kopiuj: "+sciezkaa);
        		File plik=new File(sciezkaa);
        		List lista=new ArrayList();
        		lista.add(plik);
        		FileTransferable trans=new FileTransferable(lista);
        		clip.setContents(trans, null);
        		
        	}
        });
        item3.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent event){
        		File plik=new File(jComboBox1.getSelectedItem().toString()+File.separator+mSciezka);
        		plik.delete();
        		robiePanle(jComboBox1);
        	}
        });
        item4.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent event){
        		JLabel lab=new JLabel();
        		File plik2=new File("C:/Users/pacio_000/Desktop/folder.png");
        		BufferedImage img;
				try {
					System.out.println("Dodaj");
					img = ImageIO.read(plik2);
					ImageIcon ikona=new ImageIcon(img);
	        		Image imgoo=img.getScaledInstance(25, 21, Image.SCALE_SMOOTH);
	          		ikona=new ImageIcon(imgoo);
	          		Icon ikona2=(Icon) ikona;
	        		JTextField fie=new JTextField();
	        		
	        		fie.setPreferredSize(new Dimension(100,25));
	        		lab.setIcon(ikona2);
	        		//jPanel1.setLayout(new GridLayout(15,2));
	        		lab.setLabelFor(fie);
	        		jPanel1.add(lab);
	        		jPanel1.add(fie);
	        		fie.addActionListener(new ActionListener(){
	        			public void actionPerformed(ActionEvent event){
	        				String tekst=fie.getText();
	        				File plik=new File(jComboBox1.getSelectedItem().toString()+File.separator+tekst);
	        				if(!plik.exists()){
	        					plik.mkdir();
	        				}
	        				robiePanle(jComboBox1);
	        			}
	        		});
	        		System.out.println("Konicz");
	        		
	        		jPanel1.validate();
	        		jPanel1.repaint();
	        		//robiePanle(jComboBox1);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        		
        	}
        });
        item.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent event){
        		Clipboard clip=Toolkit.getDefaultToolkit().getSystemClipboard();
        		DataFlavor flavor=DataFlavor.javaFileListFlavor;
        		if(clip.isDataFlavorAvailable(flavor)){
        			try {
        				
        				Transferable lol=clip.getContents(flavor);
        				List lista=(List) lol.getTransferData(DataFlavor.javaFileListFlavor);
        				Object[]  tablica=new Object[lista.size()];
        				tablica=lista.toArray();
        			//	ListIterator<File> lol;
						for(int n=0;n<tablica.length;n++){
							if(tablica[n] instanceof  File){
								File source=(File)tablica[n];
								//File source=new File("C:/Users/pacio_000/Desktop/folder.png");
								System.out.println("Source sciezka: "+source.getAbsolutePath());
								System.out.println("Sciezka: "+jComboBox1.getSelectedItem().toString()+"/"+source.getName());
								FileInputStream fis=new FileInputStream(source);
							
							//	fis.close();C:\PicSwaper
								//File dest=new File("C:"+File.separator+"PicSwaper"+File.separator);
								File dest=new File(jComboBox1.getSelectedItem().toString()+"/"+source.getName());
								if(!dest.exists()){
									dest.createNewFile();
								}
								FileOutputStream fos=new FileOutputStream(dest);
								FileChannel f1=fis.getChannel();
								FileChannel f2=fos.getChannel();
								f2.transferFrom(f1, 0, f1.size());
								f1.close();
								f2.close();
								fis.close();
								fos.close();
								//Files.copy(Paths.get(source.getAbsolutePath()),Paths.get(dest.getAbsolutePath()),StandardCopyOption.REPLACE_EXISTING);
								
							}
						}
					
						
					} catch (UnsupportedFlavorException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
        		}
        		
        	}
        });
        menu.add(item4);
        menu.add(item2);
        menu.add(item);
        menu.add(item3);
        jPanel1.setComponentPopupMenu(menu);
        
        DragSource dragSource;
        DragGestureListener dgs;
        dragSource=DragSource.getDefaultDragSource();
        

        dodaj.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        dodaj.setText("Dodaj");
        dodaj.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent event){
        		JFileChooser chooser=new JFileChooser();
        		chooser.setCurrentDirectory(new File(jComboBox1.getSelectedItem().toString()));
        		int result=chooser.showOpenDialog(jPanel1);
        		File plik=chooser.getSelectedFile();
        		File dest=new File(jComboBox1.getSelectedItem().toString()+File.separator+plik.getName());
        		if(!dest.exists()){
        			try {
						dest.createNewFile();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
        		}
        		try {
        			System.out.println("Plik importowy: "+plik.getAbsolutePath());
        			System.out.println("DEST: "+dest.toPath().toString());
					Files.copy(plik.toPath(), dest.toPath(), StandardCopyOption.REPLACE_EXISTING);
					robiePanle(jComboBox1);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        	}
        });
           
        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder("Serwer Log"));
        jScrollPane1.setViewportView(jTextArea1);


        jLabel3.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jLabel3.setText("Port");

        jTextField1.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N

        jButton3.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        jButton3.setText("Start");

        przycisk2.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        przycisk2.setText("Stop");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dodaj)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Przycisk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(16, 16, 16)
                            .addComponent(jButton3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(przycisk2))
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(Przycisk)
                            .addComponent(dodaj))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(przycisk2))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jComboBox1.setEditable(true);
       
        jPanel1.setPreferredSize(new Dimension(500,300));
       
        
        jComboBox1.addItemListener(new ItemListener(){
        	public void itemStateChanged(ItemEvent event){
        		if(event.getStateChange()>1){
        			robiePanle(jComboBox1);
        			/*
        			jPanel1.removeAll();
        		JComboBox combo = (JComboBox)event.getSource();
        		String sciezka=(String)combo.getSelectedItem();
        		System.out.println("Test: "+sciezka +" \t "+event.getStateChange());
        		File plik=new File(sciezka);
        		File plik2=new File("C:/Users/pacio_000/Desktop/folder.png");
        		File plik3=new File("C:/Users/pacio_000/Desktop/file.png");
        		try {
					BufferedImage img=ImageIO.read(plik2);
			  		ImageIcon ikona=new ImageIcon(img);
			  		BufferedImage img2=ImageIO.read(plik3);
			  		ImageIcon ikonaa2=new ImageIcon(img2);
			  		Image imagoo2=img2.getScaledInstance(25, 21, Image.SCALE_SMOOTH);
			  	
			  		Image imgoo=img.getScaledInstance(25, 21, Image.SCALE_SMOOTH);
			  		ikona=new ImageIcon(imgoo);
			  		ikonaa2=new ImageIcon(imagoo2);
			  		Icon ikona3=(Icon) ikonaa2;
			  		JLabel label=new JLabel(ikona);
			  		Icon ikona2=(Icon) ikona;
	        		//ArrayList list = new ArrayList();
	        	
	        		if(plik.isDirectory() ){
	        			String[] lista=new String[plik.list().length];
	        			lista=plik.list();
	        			int licznik=0;
	        			for(int n=0;n<lista.length;n++){
	        				//if(!lista[n].contains(".")){
	        					licznik++;
	        				//}
	        			}
	        			 JLabel[] taba=new JLabel[licznik];
	        			// jPanel1.setLayout(new GridLayout(taba.length,1));
	        			 jPanel1.setLayout(new GridLayout(15,2));
	        		        for(int n=0;n<taba.length;n++){
	        		        	if(!lista[n].contains(".")){
	        		        	taba[n]=new JLabel(lista[n]);
	        		        	taba[n].setIcon(ikona2);
	        		        	int tmp2=n;
	        		        	taba[n].addMouseListener(new MouseAdapter(){
	        		        		public void mouseClicked(MouseEvent event){
	        		        			
	        		        			String tmp=sciezka+"/"+taba[tmp2].getText();
	        		        			 Przycisk.addActionListener(new ActionListener(){
	        		        				 public void actionPerformed(ActionEvent event){
	        		        					 char[] tab=new char[tmp.length()];
	        		        					 for(int n=0;n<tmp.length();n++){
	        		        						 tab[n]=tmp.charAt(n);
	        		        					 }
	        		        					 int sp=0;
	        		        					 for(int n=0;n<tmp.length();n++){
	        		        						 if(tab[n]=='/'){
	        		        							 sp=n;
	        		        						 }
	        		        					 }
	        		        					 String mtmp="";
	        		        					 for(int n=0;n<sp+1;n++){
	        		        						 mtmp+=tab[n];
	        		        					 }
	        		        					 jComboBox1.addItem(mtmp);
	        		        					 jPanel1.removeAll();
	        		        					 jComboBox1.setSelectedIndex(jComboBox1.getItemCount()-1);
	        		        					 jPanel1.validate();
	        		    	        			 jPanel1.repaint();
	        		        				 }
	        		        			 });
	        		        			jComboBox1.addItem(tmp);
	        		        			jPanel1.removeAll();
	        		        			
	        		        			jComboBox1.setSelectedIndex(jComboBox1.getItemCount()-1);
	        		        			
	        		        		}
	        		        	});
	        		        	System.out.println("["+n+"] "+lista[n]);
	        		        }else{
	        		        	taba[n]=new JLabel(lista[n]);
	        		        	taba[n].setIcon(ikona3);
	        		        	int tmpe=n;
	        		        	taba[n].addMouseListener(new MouseAdapter(){
	        		        		public void mouseClicked(MouseEvent event){
	        		        			
	        		        			String tmp=sciezka+"/"+taba[tmpe].getText();
	        		        			if(taba[tmpe].getText().contains("png")){
	        		        				File pliczko=new File(tmp);
	        		        				try {
												BufferedImage obraz=ImageIO.read(pliczko);
												ImageIcon obraz2=new ImageIcon(obraz);
												JFrame ramka=new JFrame();
												JPanel panel=new JPanel();
												JLabel label=new JLabel(obraz2);
												panel.add(label);
												ramka.add(panel,BorderLayout.CENTER);
												ramka.setLocationRelativeTo(null);
											     ramka.setUndecorated(true);
											     ramka.pack();
												ramka.setVisible(true);
											     
											     
												ramka.addMouseListener(new MouseAdapter(){
													public void mouseClicked(MouseEvent event){
														ramka.setVisible(false);
													}
												});
											} catch (IOException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
	        		        				
	        		        				
	        		        			}
	        		        		}
	        		        	});
	        		        }
	        		        }
	        			 for(int n=0;n<taba.length;n++){
	        					//jPanel1.add(label);
	        				 if(taba[n]!=null){
	        		        	jPanel1.add(taba[n]);
	        				 }
	        		        
	        		        }
	        			 jPanel1.validate();
	        			 jPanel1.repaint();
	        		}
					
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        		
      */
        	}
        	}
        });
       // Container c=getContentPane();
       // JScrollPane suwak=new JScrollPane(jPanel1);
      //  suwak.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
       // jPanel1.add(suwak);
       // add(jPanel1);
        //c.add(suwak);
        //add(suwak);
      //  pack();
        
        

      //  pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     * @throws InterruptedException 
     * @throws IOException 
     */
    public static void main(String args[]) throws InterruptedException, IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PanelGlowny.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PanelGlowny.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PanelGlowny.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PanelGlowny.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
				PanelGlowny panel=new PanelGlowny();
				JFrame ramka=(JFrame)panel;
				panel.robiePanle(panel.jComboBox1);
				  Container c=ramka.getContentPane();
			        JScrollPane suwak=new JScrollPane(panel.jPanel1);
			        suwak.createVerticalScrollBar();
			        //suwak.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
			        c.add(suwak);
			        ramka.pack();
			        ramka.setLocationRelativeTo(null);
			        ramka.setVisible(true);
				
				
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
       
        
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private int id;
    private javax.swing.JButton dodaj;
    private javax.swing.JButton Przycisk;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private static javax.swing.JPanel jPanel1;
    private static javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel2;
    private static String mtmp;
    private static String mSciezka;
    private static javax.swing.JTextArea jTextArea1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton przycisk2;
    // End of variables declaration//GEN-END:variables
    public static void robiePanle(JComboBox box){
    	if(jPanel1!=null){
		jPanel1.removeAll();
    	}
	//ItemEvent event=(ItemEvent)evento;
	JComboBox combo = box;
	String sciezka=(String)combo.getSelectedItem();
	//System.out.println("Test: "+sciezka +" \t "+event.getStateChange());
	System.out.println("Sciezka w robie panel: "+sciezka);
	File plik=new File(sciezka);
	File plik2=new File("C:/PicSwaper/Temp/folder.png");
	File plik3=new File("C:/PicSwaper/Temp/file.png");
	try {
		BufferedImage img=ImageIO.read(plik2);
  		ImageIcon ikona=new ImageIcon(img);
  		BufferedImage img2=ImageIO.read(plik3);
  		ImageIcon ikonaa2=new ImageIcon(img2);
  		Image imagoo2=img2.getScaledInstance(25, 21, Image.SCALE_SMOOTH);
  	
  		Image imgoo=img.getScaledInstance(25, 21, Image.SCALE_SMOOTH);
  		ikona=new ImageIcon(imgoo);
  		ikonaa2=new ImageIcon(imagoo2);
  		Icon ikona3=(Icon) ikonaa2;
  		JLabel label=new JLabel(ikona);
  		Icon ikona2=(Icon) ikona;
		//ArrayList list = new ArrayList();
	
		if(plik.isDirectory() ){
			String[] lista=new String[plik.list().length];
			lista=plik.list();
			int licznik=0;
			for(int n=0;n<lista.length;n++){
				//if(!lista[n].contains(".")){
					licznik++;
				//}
			}
			 JLabel[] taba=new JLabel[licznik];
			// jPanel1.setLayout(new GridLayout(taba.length,1));
			 jPanel1.setLayout(new GridLayout(15,2));
		        for(int n=0;n<taba.length;n++){
		        	if(!lista[n].contains(".")){
		        	taba[n]=new JLabel(lista[n]);
		        	taba[n].setIcon(ikona2);
		        	int tmp2=n;
		        	
		        	System.out.println("["+n+"] "+lista[n]);
		        }else{
		        	taba[n]=new JLabel(lista[n]);
		        	taba[n].setIcon(ikona3);
		        	int tmpe=n;
		        	//MouseListener lol;
		        	//lol.
		         
		        	taba[n].addMouseListener(new MouseAdapter(){
		        		public void mouseEntered(MouseEvent event){
		        			mSciezka=taba[tmpe].getText();
		        			System.out.println("mSciezka: "+mSciezka);
		        		}
		        		public void mouseClicked(MouseEvent event){
		        			
		        			String tmp=sciezka+"/"+taba[tmpe].getText();
		        			if(taba[tmpe].getText().contains("png")){
		        				File pliczko=new File(tmp);
		        				try {
									BufferedImage obraz=ImageIO.read(pliczko);
									ImageIcon obraz2=new ImageIcon(obraz);
									JFrame ramka=new JFrame();
									JPanel panel=new JPanel();
									JLabel label=new JLabel(obraz2);
									panel.add(label);
									
									ramka.add(panel,BorderLayout.CENTER);
									Point p=MouseInfo.getPointerInfo().getLocation();
									ramka.setLocation(p);
								     ramka.setUndecorated(true);
								     ramka.pack();
									ramka.setVisible(true);
									//robiePanle(jComboBox1);
								     
								     
									ramka.addMouseListener(new MouseAdapter(){
										public void mouseClicked(MouseEvent event){
											ramka.dispose();
											//powrot();
										}
									});
								} catch (IOException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
		        				
		        				
		        			}
		        			System.out.println("Sciezka po: "+sciezka);
		        			jComboBox1.addItem(sciezka);
		        			jComboBox1.setSelectedIndex(jComboBox1.getItemCount()-1);
		        			robiePanle(jComboBox1);
		        		}
		        		
		        	});
		        }
		        }
		        List<String> listaa=new ArrayList<String>();
		        for(int n=0;n<taba.length;n++){
		        	int tempik=n;
		        	System.out.println("Pentela sie kreci: "+n);
		        	DropTarget l;
		        //	l.d
		        	int tempo=n;
		        	//taba[n].setTransferHandler(new Transfer(this));
		        	MouseMotionListener lol;
		 //      lol.mouseDragged(arg0); 
		        	int tmpi=n;
		        	   taba[n].setDropTarget(new DropTarget(){
			            	
			            	public synchronized void drop(DropTargetDropEvent dtde){
			            		Transferable transfer=dtde.getTransferable();
			            		System.out.println("Cos sie dzieje !!!");
			            		DataFlavor[] lol=transfer.getTransferDataFlavors();
			            		for(DataFlavor k: lol){
			            			System.out.println(k.getHumanPresentableName());
			            		}
			            		if(transfer.isDataFlavorSupported(DataFlavor.javaFileListFlavor)){
			            			System.out.println("Poszlo ?");
			            			dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
			            			try {
			    						List objects=(List) transfer.getTransferData(DataFlavor.javaFileListFlavor);
			    						for(Object o : objects){
			    							File source=(File)o;
			    							File dst=new File(jComboBox1.getSelectedItem().toString()+File.separator+taba[tmpi].getText()+File.separator+source.getName());
			    							System.out.println("Sciezka: "+dst.getAbsolutePath());
			    							if(!dst.exists()){
			    								dst.createNewFile();
			    							}
			    							Files.copy(source.toPath(), dst.toPath(), StandardCopyOption.REPLACE_EXISTING);
			    						}
			    					} catch (UnsupportedFlavorException | IOException e) {
			    						// TODO Auto-generated catch block
			    						e.printStackTrace();
			    					}
			            		}
			            		
			            	}
			            });
		        	taba[n].addMouseMotionListener(new MouseAdapter(){
		        		
		        		public void mouseDragged(MouseEvent event){
		        			int mode;
		        			if((event.getModifiers() & (InputEvent.CTRL_MASK | InputEvent.SHIFT_MASK))!=0){
		        				mode=TransferHandler.COPY;
		        			}else{
		        				mode=TransferHandler.MOVE;
		        			}
		        		//	JPanel  p=event.getSource();
		        			taba[tempo].setTransferHandler(new Transfer(mSciezka,jComboBox1.getSelectedItem().toString()));
		        			JLabel comp=(JLabel) taba[tempo];
		        			Transfer th=(Transfer) taba[tempo].getTransferHandler();
		        			
		        			System.out.println("COMP: "+comp.getName());
		        			System.out.println("Mode: "+mode);
		        			if(th==null){
		        				System.out.println("TH jest null");
		        			}
		        			if(comp==null){
		        				System.out.println("Comp jest null");
		        			}
		        			th.exportAsDrag(comp, event, mode);
		        		}
		        	});
		        	int tmp69=n;
		        taba[n].addMouseListener(new MouseAdapter(){
		        	JFrame nowa=new JFrame();
		        	
		        	public void mouseClicked(MouseEvent event){
		        		String tmp=sciezka+"/"+taba[tempik].getText();
	        			mtmp=tmp;
		        		if(!taba[tmp69].getText().contains(".")){
	        			System.out.println("KLIK");
	        			
	        			 
	        			 
	        			jComboBox1.addItem(tmp);
	        			 
	        			jPanel1.removeAll();
	        			
	        			jComboBox1.setSelectedIndex(jComboBox1.getItemCount()-1);
	        		//	robiePanle(jComboBox1);
		        		}
	        		}
		        	
		        	
		        		public void mouseEntered(MouseEvent event){
		        			mSciezka=taba[tempik].getText();
		        			System.out.println("mSciezka: "+mSciezka);
		        			
		        			JLabel lab=new JLabel(mSciezka);
		        			nowa.add(lab);
		        			Point p=MouseInfo.getPointerInfo().getLocation();
		        			System.out.println("Pozycja x: "+p.getX()+"\n Pozycja y:"+p.getY());
		        			p.x+=15;
		        			p.y+=5;
		        			nowa.setLocation(p);
		        			nowa.setResizable(false);
		        	        nowa.setUndecorated(true);
		        	        nowa.pack();
		        			nowa.setVisible(true);
		        			
		        			try {
		        				ExecutorService service= Executors.newSingleThreadExecutor();
			        			Runnable r=new Runnable(){
			        				public void run(){
			        				//nowa.dispose();	
			        				}
			        			};
			        			Future<?> f=service.submit(r);
								f.get(30,TimeUnit.SECONDS);
							} catch (InterruptedException | ExecutionException
									 e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}catch (final TimeoutException e) {
							    nowa.dispose();
							}
		        		}
	        		public void mouseExited(MouseEvent event){
	        			nowa.dispose();
	        		}
	        		
	        	});
		        }

			 for(int n=0;n<taba.length;n++){
					//jPanel1.add(label);
				 if(taba[n]!=null){
		        	jPanel1.add(taba[n]);
				 }
		        
		        }
			 jPanel1.validate();
			 jPanel1.repaint();
		}
		
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	

    }
    public static void powrot(){
    	System.out.println("mtmp na starcie: "+mtmp);
		 char[] tab=new char[mtmp.length()];
		 for(int n=0;n<mtmp.length();n++){
			 tab[n]=mtmp.charAt(n);
		 }
		 int sp=0;
		 int sp2=0;
		 for(int n=0;n<tab.length;n++){
			 System.out.println("["+n+"]: "+tab[n]+" ==  /");
			 if(tab[n]=='/' && n<tab.length-1){
				 sp=n;
				System.out.println("true"); 
			
			 }
			 if(tab[n]=='/' && tab[tab.length-1]=='/'){
				 sp2=n;
			 }
			 
		 }
		 System.out.println("SP2: "+sp2);
		 System.out.println("SP zlapalo na: "+sp);
		  mtmp="";
		 
		 for(int n=0;n<sp+1;n++){
			 mtmp+=tab[n];
		 }
		  
		// listaa.add(mtmp);
		 System.out.println("Wyszlo: "+mtmp);
		 jComboBox1.addItem(mtmp);
		 jPanel1.removeAll();
		 jComboBox1.setSelectedIndex(jComboBox1.getItemCount()-1);
		 robiePanle(jComboBox1);
		 System.out.println("KONIEC TU!!");
    }
	public static javax.swing.JComboBox<String> getjComboBox1() {
		return jComboBox1;
	}
	public static void setjComboBox1(javax.swing.JComboBox<String> jComboBox1) {
		PanelGlowny.jComboBox1 = jComboBox1;
	}

}
